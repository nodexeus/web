// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.19.1
// source: blockjoy/common/v1/currency.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "blockjoy.common.v1";

/** The currency code of some `Amount`. */
export enum Currency {
  CURRENCY_UNSPECIFIED = 0,
  CURRENCY_USD = 1,
  UNRECOGNIZED = -1,
}

/** The recurring periodic frequency (e.g. for billing cycles). */
export enum Period {
  PERIOD_UNSPECIFIED = 0,
  PERIOD_MONTHLY = 1,
  UNRECOGNIZED = -1,
}

/**
 * An `Amount` is the `value` of some `currency` at the minor units level.
 *
 * For example, with `CURRENCY_USD` the minor units are to 2 decimal places (as
 * defined by ISO 4217), meaning a `value` of `123` is equal to `$1.23`.
 */
export interface Amount {
  /** The `Currency` type of this `Amount`. */
  currency: Currency;
  /** The minor units value for the `currency` (as defined by ISO 4217). */
  amountMinorUnits: number;
}

/** A `BillingAmount` combines an `Amount` with a recurring `Period`. */
export interface BillingAmount {
  amount: Amount | undefined;
  period: Period;
}

function createBaseAmount(): Amount {
  return { currency: 0, amountMinorUnits: 0 };
}

export const Amount: MessageFns<Amount> = {
  encode(message: Amount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currency !== 0) {
      writer.uint32(8).int32(message.currency);
    }
    if (message.amountMinorUnits !== 0) {
      writer.uint32(16).int64(message.amountMinorUnits);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Amount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAmount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currency = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amountMinorUnits = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Amount>): Amount {
    return Amount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Amount>): Amount {
    const message = createBaseAmount();
    message.currency = object.currency ?? 0;
    message.amountMinorUnits = object.amountMinorUnits ?? 0;
    return message;
  },
};

function createBaseBillingAmount(): BillingAmount {
  return { amount: undefined, period: 0 };
}

export const BillingAmount: MessageFns<BillingAmount> = {
  encode(message: BillingAmount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== undefined) {
      Amount.encode(message.amount, writer.uint32(10).fork()).join();
    }
    if (message.period !== 0) {
      writer.uint32(16).int32(message.period);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BillingAmount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBillingAmount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = Amount.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.period = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BillingAmount>): BillingAmount {
    return BillingAmount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BillingAmount>): BillingAmount {
    const message = createBaseBillingAmount();
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Amount.fromPartial(object.amount)
      : undefined;
    message.period = object.period ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
